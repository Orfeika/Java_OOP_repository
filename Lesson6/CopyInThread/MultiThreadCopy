import java.io.File;

public class MultiThreadCopy {
	
	private int numberOfThreads; 
	  
	public MultiThreadCopy(int numberOfThreads) {
		super();
		this.numberOfThreads = numberOfThreads;
	}
	public MultiThreadCopy() {
		super();
		
	}
	
	

	public int getNumberOfThreads() {
		return numberOfThreads;
	}


	public void setNumberOfThreads(int numberOfThreads) {
		this.numberOfThreads = numberOfThreads;
	}


	public void concurrentCopy(int numberOfThreads, File source, File destination ){
		ThreadCopy tc = new ThreadCopy(source,destination);
		File listFiles [] = tc.getListFiles();
//-------------------------------------------------------------		
		
		for(int i = 0; i<listFiles.length;i++ ){
			System.out.println(listFiles[i].toString());
			
		}
//-------------------------------------------------------------				
	
		ThreadCopy [] threadArray = new ThreadCopy[numberOfThreads];	
		int size = listFiles.length/numberOfThreads;
		
		
		for (int i = 0; i< numberOfThreads-1; i++){
			int begin = size*i; 
			int count = size; 
			threadArray[i]= new ThreadCopy(destination, listFiles, begin,count );
			threadArray[i].start();
		}
		
		int begin = (numberOfThreads - 1)*size ;
		int count = listFiles.length - begin;		
		threadArray[numberOfThreads - 1] = new ThreadCopy(destination, listFiles, begin,count);
		threadArray[numberOfThreads - 1].start();
		
		
	}
}
