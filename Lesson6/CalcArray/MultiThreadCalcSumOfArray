
public class MultiThreadCalcSumOfArray {
	
	public static int  sumInThreads(int array[], int numberOfThreads){
		if (array.length == 0 || numberOfThreads == 0)
		{
			return 0;
		}
		
		SingleThreadCalcSumOfArray [] threadArray = new SingleThreadCalcSumOfArray[numberOfThreads];
				
		int size = array.length/numberOfThreads;
		
		for(int i = 0; i < numberOfThreads - 1; i++){
			int begin = size * i; 
			int count  = size;
			threadArray[i] = new SingleThreadCalcSumOfArray(array, begin, count);
			threadArray[i].start();
		}
		
		int begin = (numberOfThreads - 1) * size;
		int count = array.length - begin;		
		threadArray[numberOfThreads - 1] = new SingleThreadCalcSumOfArray(array, begin, count);
		threadArray[numberOfThreads - 1].start();
		
		int sum = 0;
		for(int i = 0 ; i < numberOfThreads; i++){
			try {
				threadArray[i].join();
				sum += threadArray[i].getResult();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		System.out.println(sum);
		return 0;
	}


}
